import{_ as s,c as i,ae as t,o as a}from"./chunks/framework.DxKT8lur.js";const k=JSON.parse('{"title":"Learn web security with Helmet.js","description":"","frontmatter":{"title":"Learn web security with Helmet.js","date":"2023-01-31","sidebar":true,"prev":false,"next":false,"tags":["inforsecurity","cybersecurity","helmet.js","websecurity"]},"headers":[],"relativePath":"posts/intro-on-web-security-with-helmet-js.md","filePath":"posts/intro-on-web-security-with-helmet-js.md"}'),n={name:"posts/intro-on-web-security-with-helmet-js.md"};function l(o,e,r,h,p,c){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="intro-on-web-security-with-helmet-js" tabindex="-1">Intro on web security with Helmet.js <a class="header-anchor" href="#intro-on-web-security-with-helmet-js" aria-label="Permalink to &quot;Intro on web security with Helmet.js&quot;">​</a></h1><p>&quot;Helmet helps you secure your Express apps by setting various HTTP headers. It&#39;s not a silver bullet, but it can help!&quot;, says the developers. It is a middleware (communication software) that deals with HTTP headers and also offers security modules for the <a href="https://expressjs.com" target="_blank" rel="noreferrer">Express</a> (Node.js framework) applications.</p><p>According to <a href="https://stackshare.io/expressjs" target="_blank" rel="noreferrer">stackshare.io</a>, Express.js is used in more than 1900 companies applications around the world, including Twitter, Accenture, BlaBlaCar and others. Helmet can be also be used with <a href="https://github.com/helmetjs/helmet/wiki/How-to-use-Helmet-without-Express" target="_blank" rel="noreferrer">other frameworks</a>.</p><blockquote><p>This documentation is based on (and can help you follow) the <a href="https://www.freecodecamp.org/learn/information-security/#information-security-with-helmetjs" target="_blank" rel="noreferrer">Information Security with HelmetJS</a> course on FreeCodeCamp.</p></blockquote><h2 id="installing" tabindex="-1">Installing <a class="header-anchor" href="#installing" aria-label="Permalink to &quot;Installing&quot;">​</a></h2><p>Run <code>npm install helmet</code> and in your Express application (app.js):</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;express&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> helmet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helmet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helmet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><blockquote><p>It is all about headers. Use <code>curl -v &lt;URL&gt;</code> on terminal, to read headers and confirm Helmet.js is working.</p></blockquote><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>On <code>app.js</code> write <code>app.use(helmet());</code> to include all manual configurations listed below:</p><ul><li><code>app.use(helmet.hidePoweredBy());</code> removes the <code>X-Powered-By</code> header;</li><li><code>app.use(helmet.frameguard({action: &#39;deny&#39;}));</code> makes your application break when used inside <code>&lt;frame&gt;</code> <code>&lt;iframe&gt;</code> HTML tags. This can help against Clickjacking attacks;</li><li><code>app.use(helmet.xssFilter());</code> sanitizes user input fields, protecting against Cross-Site Scripting (XSS) attacks;</li><li><code>app.use(helmet.noSniff());</code> tells the browser not to use MIME sniffing and read the file as the Content-Type header says. <blockquote><p>MIME sniffing is a technique used in browsers to determine the file type by reading some of its data. This can create vulnerabilities.</p></blockquote></li><li><code>app.use(helmet.ieNoOpen());</code> prevents the mighty <em>Internet Explorer</em> to download and execute infected HTML files.</li><li><code>app.use(helmet.hsts({maxAge: ninetyDaysInSeconds, force: true}));</code> configures HTTP Strict Transport Security (HSTS), or HTTPS only, avoiding insecure HTTP requests. <blockquote><p>You also gonna need to instantiate a variable with 90 days in seconds <code>ninetyDaysInSeconds = 90*24*60*60</code> to check certification expiracy.</p></blockquote></li><li><code>app.use(helmet.dnsPrefetchControl());</code> disables browser DNS Prefetch. <blockquote><p>To make navigation faster, DNS prefetch resolve domain names before the user tries to click on the link. However, it can cause user data leak, if you serve a malicious website in your application. The attack is the inplantation of this malicious link.</p></blockquote></li></ul><h3 id="not-included-in-app-use-helmet" tabindex="-1">Not included in <code>app.use(helmet());</code>: <a class="header-anchor" href="#not-included-in-app-use-helmet" aria-label="Permalink to &quot;Not included in \`app.use(helmet());\`:&quot;">​</a></h3><ul><li><p><code>app.use(helmet.noCache());</code> prevents your user to use cached versions of your application. This can be good when you just pushed a security update.</p></li><li><p>Content Security Policy:</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(helmet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentSecurityPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	directives:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		scriptSrc: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;self&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		styleSrc: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;self&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}))</span></span></code></pre></div><p><code>scriptSrc</code> and <code>styleSrc</code> with <code>&quot;&#39;self&#39;&quot;</code> will restrict the execution of scripts and stylesheets, originated from the same origin as the domain itself. These <code>directives</code> enhance security by mitigating Cross-Site Scripting (XSS) and file injection attacks.</p><blockquote><p>Test repository: <a href="https://replit.com/@GuilhermePetry/boilerplate-infosec" target="_blank" rel="noreferrer">https://replit.com/@GuilhermePetry/boilerplate-infosec</a></p></blockquote><div class="wisdom"><img class="wisdony" src="https://upload.wikimedia.org/wikipedia/commons/1/11/Wands01.jpg" alt=""></div>`,17)]))}const u=s(n,[["render",l]]);export{k as __pageData,u as default};
