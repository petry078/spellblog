import{_ as o,r as p,o as c,c as i,a as n,b as t,d as s,e}from"./app.ef2b660b.js";const l={},u=n("h1",{id:"javascript-cast-specification",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-cast-specification","aria-hidden":"true"},"#"),s(" JavaScript cast specification")],-1),r=n("blockquote",null,[n("p",null,"Content in progress.")],-1),d=n("h2",{id:"_1-objects",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-objects","aria-hidden":"true"},"#"),s(" 1. Objects")],-1),k=n("p",null,[n("em",null,'"ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment... In ECMAScript, an object is a collection of zero or more properties... Properties are containers that hold other objects, primitive values, or functions"')],-1),m=n("p",null,[n("em",null,'"...An object is a member of the built-in type Object; and a function is a callable object. A function that is associated with an object via a property is called a method."')],-1),v=s("The "),b={href:"https://tc39.es/ecma262/",target:"_blank",rel:"noopener noreferrer"},g=s("ECMAScript 262 \xAE 2024 Language Specification"),h=e(`<p>In JavaScript we write objects. Objects have <strong>properties</strong>, that can be:</p><ul><li>Nothing;</li><li>Other <strong>Objects</strong>;</li><li><strong>Primitive Values</strong>;</li><li><strong>Functions</strong>.</li></ul><blockquote><p>Everything that is not a primitive value, is an object.</p></blockquote><p>There are several built-in objects in JavaScript:</p><ul><li><code>Object</code>;</li><li><code>Function</code>;</li><li><code>Boolean</code>;</li><li><code>Symbol</code>;</li><li>Various <code>Error</code></li><li><code>Math</code>;</li><li><code>Number</code>;</li><li><code>Date</code>;</li><li><code>String</code>;</li><li><code>RegExp</code>;</li><li><code>Array</code>;</li><li>Nine different kinds of <code>Typed Arrays</code>;</li><li><code>Map</code>;</li><li><code>Set</code>;</li><li><code>JSON</code>;</li><li><code>ArrayBuffer</code>;</li><li><code>SharedArrayBuffer</code>;</li><li><code>DataView</code>;</li><li><code>Promise</code>;</li><li><code>Proxy</code>;</li><li><code>Reflect</code>.</li></ul><p>Objects can have methods, wich are functions that will use the object properties data.</p><p><em>&quot;When a function is called as a method of an object, the object is passed to the function as its <strong>this</strong> value.&quot;</em></p><h3 id="primitive-values" tabindex="-1"><a class="header-anchor" href="#primitive-values" aria-hidden="true">#</a> Primitive Values</h3><ul><li>Undefined;</li><li>Null;</li><li>Boolean;</li><li>Number;</li><li>BigInt;</li><li>String;</li><li>Symbol.</li></ul><p>Use <code>typeof varName</code> to reveal data type of element at runtime.</p><h3 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h3><p>A function is a callable object, with a set of commands that will be runned when the function is called. Example <code>function()</code>.</p><p>Functions can return something and have scope <code>{}</code> defined.</p><p>Functions can be called as methods, that will run with the object properties data. Example: <code>object.functionAsMethod()</code> just like <code>console.log()</code>.</p><p>As like an object it is, functions can have properties and methods.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">paramenters</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 commands
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="arrow-functions" tabindex="-1"><a class="header-anchor" href="#arrow-functions" aria-hidden="true">#</a> Arrow functions</h4><p>Alternative function syntax for using it as variables, or parameters. Arrow functions dosent have its own <code>this</code> and can&#39;t be used as constructor function.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">arrowFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">paramenters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    commands
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-strings-and-numbers" tabindex="-1"><a class="header-anchor" href="#_2-strings-and-numbers" aria-hidden="true">#</a> 2. Strings and Numbers</h2><ul><li><code>Number(varName)</code> coverts to number;</li><li><code>String(varName)</code> converts to string;</li><li><code>Number.parseInt(varName)</code> coverts to whole number;</li><li><code>Number.parseFloat(varName)</code> converts to floating-point number.</li><li><code>console.log(Number.isInteger(12))</code> will check if number is floating-point.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> fu <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span> <span class="token comment">//string</span>
<span class="token keyword">let</span> fuu <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">//number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="template-strings" tabindex="-1"><a class="header-anchor" href="#template-strings" aria-hidden="true">#</a> Template strings</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Surname: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-formatting" tabindex="-1"><a class="header-anchor" href="#string-formatting" aria-hidden="true">#</a> String formatting</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> jsString <span class="token operator">=</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsString<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsString<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> jsStringLenght <span class="token operator">=</span> jsString<span class="token punctuation">.</span>length
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsStringLenght<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-operators" tabindex="-1"><a class="header-anchor" href="#_3-operators" aria-hidden="true">#</a> 3. Operators</h2><ul><li>Arithmetic (Aritim\xE9ticos);</li><li>Assignment (Atribui\xE7\xE3o);</li><li>Comparison (Relacionais);</li><li>Logical (L\xF3gicos);</li><li>Conditional or Ternary (Condicional ou Tern\xE1rio).</li></ul><p>Precedence order:</p><ol><li>Arithmetic;</li><li>Comparison;</li><li>Logical;</li><li>Ternary.</li></ol><h3 id="arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#arithmetic-operators" aria-hidden="true">#</a> Arithmetic operators</h3><table><thead><tr><th>Operator</th><th>Function</th></tr></thead><tbody><tr><td>+</td><td>Addition</td></tr><tr><td>-</td><td>Subtraction</td></tr><tr><td>*</td><td>Multiplication</td></tr><tr><td>/</td><td>Division</td></tr><tr><td>%</td><td>Remainder (resto de uma divis\xE3o inteira)</td></tr><tr><td>**</td><td>Power (Ex: 5\xB2 = <code>[5 ** 2]</code>)</td></tr></tbody></table><h4 id="arithmetic-operators-precedence-order" tabindex="-1"><a class="header-anchor" href="#arithmetic-operators-precedence-order" aria-hidden="true">#</a> Arithmetic operators precedence order</h4><ol><li><code>()</code> first priority</li><li><code>**</code></li><li><code>*</code>, <code>/</code>, <code>%</code></li><li><code>+</code>, <code>-</code> last priority</li></ol><h3 id="assignment-operators" tabindex="-1"><a class="header-anchor" href="#assignment-operators" aria-hidden="true">#</a> Assignment operators</h3><table><thead><tr><th>Operator</th><th>Function</th></tr></thead><tbody><tr><td>=</td><td>Assignment (recebe)</td></tr><tr><td>// Auto-assignment</td><td></td></tr><tr><td>+=</td><td>Addition (a += 5; // a = a + 5)</td></tr><tr><td>-=</td><td>Subtraction (a -= 2; // a = a - 2)</td></tr><tr><td>*=</td><td>Multiplication (a *= 3; // a = a * 3)</td></tr><tr><td>/=</td><td>Division (a /= 2; // a = a / 2)</td></tr><tr><td>%=</td><td>Remainder (a %= 2; // a = a % 2)</td></tr><tr><td>**=</td><td>Exponentiation (a <strong>= 2; // a = a</strong>2)</td></tr></tbody></table><h4 id="increment-and-decrement" tabindex="-1"><a class="header-anchor" href="#increment-and-decrement" aria-hidden="true">#</a> Increment (++) and decrement (--)</h4><ul><li><code>x++</code> x = x + 1</li><li><code>x--</code> x = x - 1</li></ul><blockquote><p>Pre-increment <code>++x</code></p></blockquote><blockquote><p>Pre-decrement <code>--x</code></p></blockquote><h3 id="comparison-operators" tabindex="-1"><a class="header-anchor" href="#comparison-operators" aria-hidden="true">#</a> Comparison operators</h3><p>It returns <code>true</code> or <code>false</code>, comparing only the value.</p><table><thead><tr><th>Operator</th><th>Function</th></tr></thead><tbody><tr><td>&gt;</td><td>Greater than (maior que)</td></tr><tr><td>&lt;</td><td>Less than (menor que)</td></tr><tr><td>&gt;=</td><td>Greater than or equal to (maior que ou igual)</td></tr><tr><td>&lt;=</td><td>Less than or equal to (menor que ou igual)</td></tr><tr><td>==</td><td>Equal to (same value)</td></tr><tr><td>!=</td><td>Not equal to</td></tr></tbody></table><h4 id="strict-operators-igualdade-e-desigualdede" tabindex="-1"><a class="header-anchor" href="#strict-operators-igualdade-e-desigualdede" aria-hidden="true">#</a> Strict operators (igualdade e desigualdede)</h4><p>Compares value and type.</p><table><thead><tr><th>Operator</th><th>Function</th></tr></thead><tbody><tr><td>===</td><td>Strict equal to (igual restrito)</td></tr><tr><td>!==</td><td>Strict not equal to (desigual restrito)</td></tr></tbody></table><p>Examples:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">2</span>  <span class="token comment">//true</span>
<span class="token number">7</span> <span class="token operator">&lt;</span> <span class="token number">4</span>  <span class="token comment">//false</span>
<span class="token number">8</span> <span class="token operator">&gt;=</span> <span class="token number">8</span> <span class="token comment">//true</span>
<span class="token number">9</span> <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token comment">//false</span>
<span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token comment">//true</span>
<span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token comment">//false</span>

<span class="token comment">// strict equal operator</span>
<span class="token number">2</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">// true</span>
<span class="token number">2</span> <span class="token operator">===</span> <span class="token string">&#39;2&#39;</span> <span class="token comment">// false</span>

<span class="token comment">// strict not equal operator</span>
<span class="token number">2</span> <span class="token operator">!==</span> <span class="token string">&#39;2&#39;</span> <span class="token comment">// true</span>
<span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">2</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical operators</h3><table><thead><tr><th>Operator</th><th>Function</th><th>Example</th></tr></thead><tbody><tr><td>!</td><td>Not (nega\xE7\xE3o)</td><td><code>(x &lt; 10 &amp;&amp; y &gt; 1)</code> // true</td></tr><tr><td>&amp;&amp;</td><td>And (conjun\xE7\xE3o)</td><td>\`(x == 5</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>Unary operator <code>!</code> (not) only deals with one operating, turning 0 in 1 and 1 in 0. True to false, false to true.</p><p>Binary operators <code>&amp;&amp;</code> and <code>||</code> deals with two operating and returns true or false after analysis. If you ask for a book heavy and <code>&amp;&amp;</code> black, it must return true only if the book is heavy and black, but the or <code>||</code> operator will return true if at least one is true.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Inverts the result</span>
<span class="token operator">!</span><span class="token boolean">true</span> <span class="token comment">//false</span>
<span class="token operator">!</span><span class="token boolean">false</span> <span class="token comment">//true</span>

<span class="token comment">//Both need to be \`true\` to return \`true\`.</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token comment">//true</span>
<span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token comment">//false</span>
<span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token comment">//false</span>
<span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token comment">//false</span>

<span class="token comment">//Only one need to be \`true\` to return \`true\`</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token comment">//true</span>
<span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token comment">//true</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token comment">//false</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditional-or-ternary-operators" tabindex="-1"><a class="header-anchor" href="#conditional-or-ternary-operators" aria-hidden="true">#</a> Conditional or Ternary operators</h3><p>It begins with a logic test, if it returns true, it will run the code on the first <code>true</code> slot, and if it returns false, runs the second <code>false</code> slot.</p><p>Syntax:</p><p><code>x &amp;&amp; b ? true : false</code></p><p>Examples:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1.</span>
<span class="token keyword">let</span> media <span class="token operator">=</span> <span class="token number">5.5</span>
<span class="token keyword">let</span> mediaCalculada <span class="token operator">=</span> media <span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token operator">?</span> <span class="token string">&quot;Aprovado(true)&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Reprovado(false)&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mediaCalculada<span class="token punctuation">)</span> <span class="token comment">// Reprovado(false)</span>

<span class="token comment">// 2.</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">8</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">5</span> <span class="token operator">:</span> <span class="token number">9</span> <span class="token comment">// 5 (true)</span>

<span class="token comment">//3. </span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string">&quot;Adult&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Child&quot;</span> <span class="token comment">// Adult (true)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-document-object-model-dom" tabindex="-1"><a class="header-anchor" href="#_4-document-object-model-dom" aria-hidden="true">#</a> 4. Document Object Model (DOM)</h2><p>The DOM tree:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>window.location
      .history
      .document.&lt;call to HTML tag (selector)&gt;    	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="selectors" tabindex="-1"><a class="header-anchor" href="#selectors" aria-hidden="true">#</a> Selectors</h3><h4 id="getelementsby" tabindex="-1"><a class="header-anchor" href="#getelementsby" aria-hidden="true">#</a> getElementsBy...</h4><ul><li><code>getElementById</code> Select HTML tag by its ID.</li><li><code>getElementsByTagName()</code> Select HTML tags.</li><li><code>getElementsByName()</code> Select HTML tag by its name.</li><li><code>getElementsByClassName()</code> Select HTML tags by its class name.</li></ul><p>Usage:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>IdOfP<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Old string<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;IdOfP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;New string&quot;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query-selectors" tabindex="-1"><a class="header-anchor" href="#query-selectors" aria-hidden="true">#</a> Query selectors</h4><p>Modern aproach of selectors.</p><ul><li><code>querySelector()</code> Select the first HTML Tag</li><li><code>querySelectorAll()</code> Creates a list of all elements. Not sure how it works.</li></ul><blockquote><p><code>querySelector()</code> can be used to select HTML tag + ID/Class (<code>#</code> for ID or <code>.</code> for class)</p></blockquote><p>Usage:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>String 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>IdOfP<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>String 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>ClassOfP<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>String 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;Select by HTML tag name&quot;</span>
window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#IdOfP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;Select by ID&quot;</span>
window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.ClassOfP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;Select by Class name&quot;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="innertext-and-innerhtml" tabindex="-1"><a class="header-anchor" href="#innertext-and-innerhtml" aria-hidden="true">#</a> innerText and innerHTML</h3><ul><li><code>innerText</code> Write plain text on top of selected element;</li><li><code>innerHTML</code> Write HTML on top of selected element;</li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">&quot;Inset only raw text&quot;</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">&quot;Insert text with &lt;strong&gt;HTML Tags&lt;/strong&gt;&quot;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Avoid using <code>innerHTML</code>, that can represent a risk of Cross-Site Scripting (XSS).</p></blockquote><h3 id="dom-events" tabindex="-1"><a class="header-anchor" href="#dom-events" aria-hidden="true">#</a> DOM Events</h3><p>It works alongside with functions(). Events are called with reserved words, inside the <code>.html</code> file, like <code>onkeydown=&quot;functionName()&quot;</code> or in the <code>.js</code> file with Event Listeners, like:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Try it<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>textField<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> printDate<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">printDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;textField&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This can also be done with Arrow Functions:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;myBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">printDate</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;textField&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mouse events example:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">let</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">//Events</span>
        main<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseenter&quot;</span><span class="token punctuation">,</span> mouseenterFunction<span class="token punctuation">)</span>
        main<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;mouseout&quot;</span><span class="token punctuation">,</span> mouseoutFunction<span class="token punctuation">)</span>
        main<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> clickFunction<span class="token punctuation">)</span>

        <span class="token keyword">function</span> <span class="token function">mouseenterFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            main<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;mouseenter event&quot;</span>
            main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">function</span> <span class="token function">mouseoutFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            main<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;mouseout event&quot;</span>
            main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;yellow&quot;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">function</span> <span class="token function">clickFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            main<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;click event&quot;</span>
            main<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&quot;purple&quot;</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
        <span class="token selector">main</span> <span class="token punctuation">{</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
            <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Hello \${name}</code> example:</p><blockquote><p>This example needs refinement.</p></blockquote><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>print<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> name <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>inName<span class="token punctuation">.</span>value
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;submit&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">printName</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
        printName<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,87),f=s("For complete events list, see "),y={href:"https://developer.mozilla.org/en-US/docs/Web/Events",target:"_blank",rel:"noopener noreferrer"},q=s("MDN Web Docs"),w=s("."),x=e(`<h2 id="_5-math-functions" tabindex="-1"><a class="header-anchor" href="#_5-math-functions" aria-hidden="true">#</a> 5. Math functions</h2><p>In addition to the Arithmetic operators, math can be done with the <code>Math.</code> functions.</p><h3 id="rounding-numbers" tabindex="-1"><a class="header-anchor" href="#rounding-numbers" aria-hidden="true">#</a> Rounding numbers</h3><ul><li><code>Math.round(num)</code> return the closest number. Example <code>Math.round(4.4)</code> = <code>4</code> and <code>Math.round(4.5)</code> = <code>5</code>;</li><li><code>Math.ceil(num)</code> round to bigger number. Example: <code>Math.ceil(4.2)</code> = <code>5</code>;</li><li><code>Math.floor(num)</code> round to lower number. Example: <code>Math.floor(4.2)</code> = <code>4</code>;</li></ul><h3 id="generating-random-numbers" tabindex="-1"><a class="header-anchor" href="#generating-random-numbers" aria-hidden="true">#</a> Generating random numbers</h3><p><code>Math.random()</code> will return a random number between 0 and 1.</p><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">8.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//8</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">8.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//9</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">4.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">4.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//4</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//0.7099176926811621</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-conditionals" tabindex="-1"><a class="header-anchor" href="#_6-conditionals" aria-hidden="true">#</a> 6. Conditionals</h2><p>Programs read data (input), process it, and return something. With <strong>conditionals</strong> you can have limitations to work with.</p><p>The syntax in JavaScript, and most languages, are <code>if...else</code>, <code> switch...case</code> and with <code>ternary operators</code>.</p><p>The condition (parameters) must be written with <a href="#comparison-operators">comparison operators</a>. Each comparison will return <code>true</code> or <code>false</code>.</p><p>There are situations in which your program must analyze more than one condition. In that case, use <a href="#logical-operators">logical operators</a> inside the parameter/condition slot. Example: <code>condition == true &amp;&amp; condition == true</code> or <code>condition == true || condition != true</code>.</p><h3 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> if...else</h3><p>The <code>if...else</code> conditions can be written in three different structures:</p><ul><li>Simple <code>if (condition == true){run}</code>;</li><li>Composed <code>if (condition == true){run}... else{run}</code>;</li><li>Multiple <code>if (condition == true){run}... else if{run}...else{run}</code>.</li></ul><blockquote><p>Multiple conditions can have as many <code>else if</code> as necessary.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;N1: &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;N2: &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> n3 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;N3: &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> n4 <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;N4: &quot;</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> average <span class="token operator">=</span> <span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3 <span class="token operator">+</span> n4<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>average <span class="token operator">&gt;=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Approved!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>average <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Need recovery&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Disapproved&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="switch-case" tabindex="-1"><a class="header-anchor" href="#switch-case" aria-hidden="true">#</a> switch...case</h3><p>Just another structure to make conditionals. Usable when you have a lot of options based on values of a variable, or when you need to return a different case for every value possible of a variable.</p><p>Basic example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> neighborhood <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;neighborhood: &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> fee

<span class="token keyword">switch</span> <span class="token punctuation">(</span>neighborhood<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;center&quot;</span><span class="token operator">:</span>
        fee <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">break</span>

    <span class="token keyword">case</span> <span class="token string">&quot;fragata&quot;</span><span class="token operator">:</span>
    <span class="token keyword">case</span> <span class="token string">&quot;caranda&quot;</span><span class="token operator">:</span> 
        fee <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment">//Both (fragada and caranda) will return 7</span>
    <span class="token keyword">break</span>

    <span class="token keyword">case</span> <span class="token string">&quot;elysee&quot;</span><span class="token operator">:</span>
        fee <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">break</span>

    <span class="token keyword">default</span><span class="token operator">:</span>
        fee <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fee<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-repetitions-loops" tabindex="-1"><a class="header-anchor" href="#_7-repetitions-loops" aria-hidden="true">#</a> 7. Repetitions (Loops)</h2><p>Repetitions, or Loops, (<code>La\xE7os de Repeti\xE7\xE3o</code>, in Portuguese) allows you to run one or more commands in a program or function as many times you need.</p><p>Loops need <em>braking points</em> and can be used with Conditional (if...else/switch... case/break/continue).</p><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3><p>The <code>for</code> syntax is composed by 3 instructions <code>for (initialValue; conditional; incremental/decremental){command}</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>command<span class="token punctuation">}</span>
        <span class="token operator">||</span>          <span class="token operator">||</span>        <span class="token operator">||</span>
	    \\<span class="token operator">/</span>          \\<span class="token operator">/</span>        \\<span class="token operator">/</span>
<span class="token punctuation">{</span><span class="token constant">INITIAL</span> <span class="token constant">VALUE</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token constant">CONDITIONAL</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token constant">INCREMENTAL</span><span class="token punctuation">}</span>

<span class="token comment">//This means that \`i\` starts as 1 and, and will run until it grows to 10, since each commands run, it grows by {INCREMENTAL/DECREMENTAL}, in that case 1.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Incremental short: <code>i++</code></p></blockquote><p>The last instruction can also be decremental: <code>i = 1 -1</code> or <code>i--</code></p><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    numbers<span class="token operator">++</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token comment">//It will print numbers from 1 to 4.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multiplication table example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Number: &quot;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  i <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">*</span> i
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot; * &quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot; = &quot;</span> <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),j={href:"https://replit.com/@GuilhermePetry/multiplication-table",target:"_blank",rel:"noopener noreferrer"},_=s("Run Multiplication Table on Replit"),S=e(`<h4 id="adding-conditional-to-for-loops" tabindex="-1"><a class="header-anchor" href="#adding-conditional-to-for-loops" aria-hidden="true">#</a> Adding Conditional to for loops</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//command1</span>
	<span class="token comment">//command2</span>
	<span class="token comment">//command3</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">//command4</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h3><p>It tests the conditional before, to see if it will run the commands or not.</p><p>Examples:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>
	command
<span class="token punctuation">}</span> <span class="token comment">//While this condition is true, run {command}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Number: &quot;</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Oi&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-while" tabindex="-1"><a class="header-anchor" href="#do-while" aria-hidden="true">#</a> do... while</h3><p>It executes the command at least once, even if the condition is not true.</p><p>Examples:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
	command
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">do</span> <span class="token punctuation">{</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="break-and-continue" tabindex="-1"><a class="header-anchor" href="#break-and-continue" aria-hidden="true">#</a> break and continue</h3><p>The <code>break</code> and <code>continue</code> are two commands that can be used inside JavaScript loops.</p><ul><li><code>break</code>: jumps out of a loop.</li><li><code>continue</code>: jumps in the beginning of the loop.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    commands
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span> <span class="token comment">//It will test the condition and make the program continue in case of true.</span>
    <span class="token punctuation">}</span>
    commands
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span> <span class="token comment">//It breaks the loop, making the program ignore everything left inside the loop. If there is commands after the break, they will not be executed.</span>
    <span class="token punctuation">}</span>
    commands
<span class="token punctuation">}</span>
commands
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Number: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="counters-and-accumulators" tabindex="-1"><a class="header-anchor" href="#counters-and-accumulators" aria-hidden="true">#</a> Counters and accumulators</h3><p>Counters and accumulators are ways to track how many times a particular action or event has occurred. They are commonly used inside loops to count the number of iterations (iteration is a lap made by the program inside a loop or code block).</p><p>However, counters and accumulators are commonly used inside loops, they can also be used outside of loops, to count occurrences of an event or action that occurs multiple times in the program.</p><p>In JavaScript, counters and accumulators need to be initiated, usually receiving the value of 0. Since they are used to count cycles, you need to know how many cycles (iterations) it has done already, that is why to start a counter with 0.</p><p><strong>Counters</strong> represent <code>a variable = a variable + 1 (the count factor)</code>, <strong>accumulators</strong> represent <code>a variable = a variable + another variable</code>, and they can be written with the <code>+=</code> operator.</p><p>Counter example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//variable initiation</span>
result <span class="token operator">=</span> result <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//traditional way</span>
result <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment">//with the += operator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Accumulator example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">//variable initiation</span>
result <span class="token operator">=</span> result <span class="token operator">+</span> price <span class="token comment">//traditional way</span>
result <span class="token operator">+=</span> price <span class="token comment">//with the += operator</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Loop with counter example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  counter <span class="token operator">+=</span> <span class="token number">1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-arrays" tabindex="-1"><a class="header-anchor" href="#_8-arrays" aria-hidden="true">#</a> 8. Arrays</h2><p>Different from variables, that hold only one data entry, arrays can hold many values. Its values can be the same as from the objects, <em>all the JavaScript things</em>.</p><blockquote><p>Arrays can be declared with <code>const</code> even when your values may be changed. What <code>const</code> can&#39;t handle being essentially reassigned.</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string2&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span> <span class="token comment">//Normal array of strings and number</span>
<span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string2&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment">//Used as constructor.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Array values are counted starting from 0 (zero) and the values are selected with its index number. Example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string2&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;string3&quot;</span><span class="token punctuation">]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">//Value rewrite:</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;NewValue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-methods" tabindex="-1"><a class="header-anchor" href="#array-methods" aria-hidden="true">#</a> Array methods</h3><ul><li><code>arr.push()</code> adds one, or more, elements to the end of the array and returns the new array lenght.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string2&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;string3&quot;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;one or&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;more&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;elements&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.pop()</code> removes the last element of the array.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string2&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;pop this one&quot;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.shift()</code> removes the first element of the array.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;shift this one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string2&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;pop this one&quot;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.unshift()</code> adds one, or more, elements to the beginning of the array and returns the new array lenght.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string2&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&quot;string3&quot;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unshift&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.splice()</code> used to remove and replace elements.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;remove 4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;remove 5&quot;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//Start position, number of elements to delete</span>


<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;number this 4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;number this 5&quot;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;quatro&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cinco&quot;</span><span class="token punctuation">)</span> <span class="token comment">//Start position, number os elements to replace, replace value, replace value.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.slice()</code> select elements of an array in a new array.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;string0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;string1&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;quatro&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cinco&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//Copy the array</span>
arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// Select elements from index 2 to 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.map()</code> expects a function as its argument. This function is then called for each element in the array.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> mappedArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>plus<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mappedArr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.forEach()</code> used for repetition loops. Run commands in each element of the array and saves results in the same array.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>plusFunction<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">plusFunction</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//with arrow function</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.filter()</code> creates a new array with all elements that pass the test implemented by the provided function.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> filteredArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filteredArr<span class="token punctuation">)</span> <span class="token comment">// Output: [4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.reduce()</code> applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">// Output: 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>arr.sort()</code> sorts the elements of an array in place and returns the array.</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// Output: [1, 2, 4, 5, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="array-properties" tabindex="-1"><a class="header-anchor" href="#array-properties" aria-hidden="true">#</a> Array properties</h3><ul><li><code>arr.length</code> returns the number of elements.</li><li><code>arr.constructor</code> returns the constructor function that created it.</li><li><code>arr.prototype</code> don&#39;t really know, some cursed stuff.</li></ul><h3 id="array-of-objects" tabindex="-1"><a class="header-anchor" href="#array-of-objects" aria-hidden="true">#</a> Array of objects</h3><p>An array of objects stores elements that have attributes. Attributes are invoked using the key-value concept.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">elementAttributeKey</span><span class="token operator">:</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">elementAttributeKey2</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">elementAttributeKey</span><span class="token operator">:</span> <span class="token string">&quot;Other value&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">elementAttributeKey2</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="locating-content-inside-a-array" tabindex="-1"><a class="header-anchor" href="#locating-content-inside-a-array" aria-hidden="true">#</a> Locating content inside a array</h3><p>The methods <code>indexOf()</code>, <code>lastIndexOf()</code>, and <code>includes()</code> are used to locate content inside arrays.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Returns the index of the first occurrence of 3</span>
arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Returns the index of the last occurrence of 3</span>
arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// Returns true if the array contains 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-cookies-local-storage-session-storage" tabindex="-1"><a class="header-anchor" href="#_9-cookies-local-storage-session-storage" aria-hidden="true">#</a> 9. Cookies, local storage, session storage</h2><p>{introduction}</p><h3 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> Cookies</h3><p>{definition and example}</p><h3 id="local-storage" tabindex="-1"><a class="header-anchor" href="#local-storage" aria-hidden="true">#</a> Local storage</h3><p>{definition and example}</p><h3 id="session-storage" tabindex="-1"><a class="header-anchor" href="#session-storage" aria-hidden="true">#</a> session storage</h3><p>{definition and example}</p><h2 id="_10-node-js" tabindex="-1"><a class="header-anchor" href="#_10-node-js" aria-hidden="true">#</a> 10. Node.js</h2><p>JavaScript runs on browsers, as client side code. With Node.js you can run it as a server.</p>`,76),T={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},A=s("Node.js"),N=s("."),E=n("h3",{id:"prompt-sync",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#prompt-sync","aria-hidden":"true"},"#"),s(" prompt-sync")],-1),M={href:"https://github.com/heapwolf/prompt-sync",target:"_blank",rel:"noopener noreferrer"},I=s("prompt-sync"),L=s(" enables you to use "),C=n("code",null,"prompt",-1),O=s(" on the terminal."),D=e(`<p>Run <code>npm install prompt-sync</code>. This will install <code>node_modules</code> and <code>package.json</code>.</p><p>On your JavaScript file:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;prompt-sync&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> promptData <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Data: &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>On the terminal, open the folder where your JavaScript file is and run:</p><p><code>node &lt;fileName&gt;.js</code></p>`,5),B={href:"https://github.com/petry078/prompt-sync-template",target:"_blank",rel:"noopener noreferrer"},F=s("prompt-sync-template"),R=n("div",{class:"wisdom"},[n("img",{class:"wisdony",src:"https://upload.wikimedia.org/wikipedia/commons/1/17/RWS_Tarot_19_Sun.jpg",alt:""})],-1),H=n("ul",null,[n("li",null,"163"),n("li",null,"190"),n("li",null,"214")],-1);function P(J,V){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,r,d,k,m,n("blockquote",null,[n("p",null,[v,n("a",b,[g,t(a)])])]),h,n("blockquote",null,[n("p",null,[f,n("a",y,[q,t(a)]),w])]),x,n("blockquote",null,[n("p",null,[n("a",j,[_,t(a)])])]),S,n("blockquote",null,[n("p",null,[n("a",T,[A,t(a)]),N])]),E,n("p",null,[n("a",M,[I,t(a)]),L,C,O]),D,n("blockquote",null,[n("p",null,[n("a",B,[F,t(a)])])]),R,H])}var W=o(l,[["render",P],["__file","javascript-references.html.vue"]]);export{W as default};
