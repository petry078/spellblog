import{_ as e,o,c as s,e as a}from"./app.ef2b660b.js";const t={},i=a(`<h1 id="bash-scriptage" tabindex="-1"><a class="header-anchor" href="#bash-scriptage" aria-hidden="true">#</a> Bash Scriptage</h1><p>Bourne Again Shell (Bash) scripts are scripts of commands used on Unix terminals, like the Linux terminal.</p><p>It allows you to enter a list of commands (in sequence) just by typing the name of the Bash Script file.</p><p>For example, to open Firefox for Developers on Linux systems, you need to open the folder where it is at and double click de file called <code>firefox</code>.</p><p>To do it from the terminal, you need:</p><ul><li>Change Directory <code>cd</code> to the folder where <code>firefox</code> is;</li><li>Run <code>./firefox</code>.</li></ul><blockquote><p><code>./</code> means &quot;from this folder where i&#39;m&quot; + <code>/</code> to select file/folder you wish to work with.</p></blockquote><p>To achieve this, you just typed a few commands on the terminal. To do this with a single command, you need a Bash Script.</p><h2 id="how-to-create-a-bash-script" tabindex="-1"><a class="header-anchor" href="#how-to-create-a-bash-script" aria-hidden="true">#</a> How to create a Bash Script</h2><p>At your user home folder <code>$</code> (/home/user), create a file called <code>script.sh</code>.</p><blockquote><p>Your user home folder is usually where your terminal starts. Type <code>pwd</code> to check. It needs to be <code>/home/petry</code>, for example.</p></blockquote><p>Inside the <code>script.sh</code> write <code>#!/bin/sh</code> on the very first line. This will tell the terminal it is a Bash Script.</p><p>The first command of your script will be written above, and so on.</p><p>Example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token builtin class-name">cd</span> aurora
./firefox <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is the same as: <code>cd aurora &amp;&amp; ./firefox &amp;</code>.</p><blockquote><p>In this case, is just two commands, but this can be used to create complex scripts, with logic operators and all that cool programming stuff.</p></blockquote><h2 id="bonus-how-to-create-symbolic-links-or-soft-links-to-folders-files-on-the-terminal" tabindex="-1"><a class="header-anchor" href="#bonus-how-to-create-symbolic-links-or-soft-links-to-folders-files-on-the-terminal" aria-hidden="true">#</a> Bonus: how to create symbolic &#39;links&#39;, or soft links, to folders/files on the terminal</h2><p>As you can see on the example, the first command on the script is <code>cd aurora</code>. Aurora is the nickname for the Firefox for Developers, and this folder is actually <code>/home/petry/aurora/</code>.</p><p>This is a link. To create one, you will need the <code>ln</code> command. Like:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ln</span> -s <span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token punctuation">[</span>symbolic name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ln</span> -s /home/petry/aurora/ aurora
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>This is starting to look like magic...</p></blockquote><div class="wisdom"><img class="wisdony" src="https://upload.wikimedia.org/wikipedia/commons/9/9f/Pents02.jpg" alt=""></div>`,25),n=[i];function r(c,l){return o(),s("div",null,n)}var p=e(t,[["render",r],["__file","bash-scriptage.html.vue"]]);export{p as default};
